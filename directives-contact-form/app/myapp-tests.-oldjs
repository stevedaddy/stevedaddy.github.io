
//
//describe('Testing my-directive', function() {
//    var $rootScope, $compile, element, scope,  directiveElem, $httpBackend;
//
//    beforeEach(function(){
//        module('MyApp');
//       // module('ngMockE2E'); //<-- IMPORTANT!
//        inject(function($injector){
//            $httpBackend = $injector.get('$httpBackend');
//            $httpBackend.whenGET('loginView.html').respond(200, {'0' : 'steve'});
//           // $httpBackend.whenGET('loginView.html').passThrough();
//            $rootScope = $injector.get('$rootScope');
//            $compile = $injector.get('$compile');
//            element = angular.element('<opt-in></opt-in>');
//            scope = $rootScope.$new();
//            // wrap scope changes using $apply
//            scope.$apply(function(){
//               // scope.user = { name: "John" };
//                $compile(element)(scope);
//            });
//            directiveElem = getCompiledElement();
//        });
//    });
//    function getCompiledElement(){
//        var element = angular.element('<opt-in></opt-in>');
//        var compiledElement = $compile(element)(scope);
//        scope.$digest();
//        return compiledElement;
//    }
//    it('should have an ng-transclude directive in it', function () {
//        var transcludeElem = directiveElem.find('div[ng-transclude]');
//         console.log(JSON.stringify(transcludeElem, null, 4));
//        expect(transcludeElem.length).toBe(1);
//    });
//
//    it('should have transclude content', function () {
//        expect(directiveElem.find('form').length).toEqual(1);
//    });
//});


// WORKING
//describe('Testing my-directive', function() {
//    var $rootScope, $compile, element, scope;
//
//    beforeEach(function(){
//        module('MyApp');
//        inject(function($injector){
//            $rootScope = $injector.get('$rootScope');
//            $compile = $injector.get('$compile');
//            element = angular.element('<my-profile data="user"></my-profile>');
//            scope = $rootScope.$new();
//            // wrap scope changes using $apply
//            scope.$apply(function(){
//                scope.user = { name: "John" };
//                $compile(element)(scope);
//            });
//        });
//    });
//
//    it('Name should be rendered', function() {
//        expect(element[0].innerText).toEqual('John');
//    });
//});






//
//
//describe("Testing hidden", function() {
//    var $compile, $scope;
//
//    beforeEach(inject(function(_$compile_, $rootScope, $document){
//        console.log($document);
//        console.log(document);
//        $compile = _$compile_;
//        $scope = $rootScope.$new();
//    }));
//
//    function getElement() {
//        var element = angular.element("<div my-directive></div>");
//
//        $compile(element)($scope);
//        document.body.appendChild(element[0]);
//        return element;
//    }
//
//    it("passes", function() {
//        var element = getElement();
//        element.hide();
//        expect(element.is(":hidden")).toBe(true); // Passes
//        document.body.removeChild(element[0]);
//    });
//
//    it("fails", function() {
//        var element = getElement();
//        element.show();
//        expect(element.is(":hidden")).toBe(false); // Fails
//        document.body.removeChild(element[0]);
//    });
//
//});
//
// the describe keyword is used to define a test suite (group of tests)





describe('Test directive with canvas', function() {
    var $compile, $scope, $templateCache, $document, template,
        html = '<opt-in><div class="brand-logo"></div></opt-in>',
        mockHtml = '<div class="container"> <div class="row"> <div class="col-xs-12 col-sm-6 col-sm-offset-3"> <div class="opt-in"><div ng-transclude></div> <h1>Simple Login Form</h1> <form name="createProjectForm" ng-submit="createProjectForm.$valid && createProjectForm.submit()" novalidate> <div class="form-group" ng-class="{ \'has-error\' : createProjectForm.name.$invalid && !createProjectForm.name.$pristine }"> <label for="name">First Name:</label> <input type="text" class="form-control" name="name" id="name" placeholder="First Name" required data-ng-minlength="3" data-ng-model="project.name"> <span class="help-block" ng-show="createProjectForm.name.$dirty && createProjectForm.name.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.name.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.lastName.$invalid && !createProjectForm.lastName.$pristine}"> <label for="lastName">Last Name:</label> <input type="text" class="form-control" name="lastName" id="lastName" placeholder="Last Name" required data-ng-minlength="3" data-ng-model="project.lastName"> <span class="help-block" ng-show="createProjectForm.lastName.$dirty && createProjectForm.lastName.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.lastName.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.email.$invalid && !createProjectForm.email.$pristine}"> <label for="email">Email:</label> <input type="email" class="form-control" name="email" id="email" placeholder="you@email.com" required data-ng-minlength="3" data-ng-model="project.email"> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.required">The email field is required.</span> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.email">Your email is invalid.</span> </div> <div class="form-group"> <button ng-disabled="createProjectForm.$invalid" type="submit" class="btn btn-primary pull-right" value="Login" title="Login"> <span>Login</span> </button> </div> </form> </div> </div> </div></div>';

    beforeEach(module('MyApp'));

    beforeEach(inject(function(_$compile_, _$rootScope_, _$templateCache_, _$document_){
        $document = _$document_;
        $compile = _$compile_;
        $scope = _$rootScope_.$new();
        $templateCache = _$templateCache_;
        template = $templateCache.put('loginView.html', mockHtml);
    }));

    var createDirective = function () {
        var elm = angular.element(html);
        $compile(elm)($scope);
        document.body.appendChild(elm[0]);
        $scope.form = elm[0];
        $scope.$digest();
        return elm[0];
    };
    var setDir = function () {
        dirElement = angular.element(html);
        $compile(dirElement)($scope);
        $scope.$digest();
    };

    describe('when created', function () {
        it('should have a form', function () {
            var element = createDirective();
            expect($(element).find('form').length).toBe(1);
            document.body.removeChild(element);
        });
        it('should have 3 inputs', function () {
            var element = createDirective();
            expect($(element).find('input').length).toBe(3);
            document.body.removeChild(element);
        });
        it('should have a first name input', function () {
            var element = createDirective();
            expect($(element).find("input#lastName").length).toBe(1);
            document.body.removeChild(element);
        });
        it('should have a last name input', function () {
            var element = createDirective();
            expect($(element).find('input#lastName').length).toBe(1);
            document.body.removeChild(element);
        });
        it('should have an email input', function () {
            var element = createDirective();
            expect($(element).find('input#email').length).toBe(1);
            document.body.removeChild(element);
        });

        it('Input:email should be invalid with anything but an email address', function () {
            setDir();
            var nameElement = angular.element(dirElement[0].querySelector('#email'));
            nameElement.val('S').triggerHandler('input');
            $scope.$apply();
            expect(nameElement.hasClass('ng-valid')).toEqual(false);
        });
        it('Input:email should be invalid with anything but an email address', function () {
            setDir();
            var nameElement = angular.element(dirElement[0].querySelector('#email'));
            nameElement.val('stevethewebguy@gmail.com').triggerHandler('input');
            $scope.$apply();
            expect(nameElement.hasClass('ng-valid')).toEqual(true);
        });


        it('Input:name should be invalid with less than 3 chars', function () {
            setDir();
            var nameElement = angular.element(dirElement[0].querySelector('#name'));
            nameElement.val('S').triggerHandler('input');
            $scope.$apply();
            expect(nameElement.hasClass('ng-valid')).toEqual(false);
        });
        it('Input:name should be valid with more than 3 chars', function () {
            setDir();
            var nameElement = angular.element(dirElement[0].querySelector('#name'));
            nameElement.val('Steve').triggerHandler('input');
            $scope.$apply();
            expect(nameElement.hasClass('ng-valid')).toEqual(true);
        });
    });
});









//describe('Unit testing great quotes', function() {
//    var $compile,
//        $rootScope;
//
//    // Load the myApp module, which contains the directive
//    beforeEach(module('MyApp'));
//
//    // Store references to $rootScope and $compile
//    // so they are available to all tests in this describe block
//    beforeEach(inject(function(_$compile_, _$rootScope_){
//        // The injector unwraps the underscores (_) from around the parameter names when matching
//        $compile = _$compile_;
//        $rootScope = _$rootScope_;
//    }));
//
//    it('Replaces the element with the appropriate content', function() {
//        // Compile a piece of HTML containing the directive
//        var element = $compile("<a-great-eye></a-great-eye>")($rootScope);
//        // fire all the watches, so the scope expression {{1 + 1}} will be evaluated
//        $rootScope.$digest();
//        // Check that the compiled element contains the templated content
//        expect(element.html()).toContain("lidless, wreathed in flame, 2 times");
//    });
//});

//describe('Unit testing great quotes', function() {
//    var $compile,
//        $rootScope;
//
//    // Load the myApp module, which contains the directive
//    beforeEach(module('MyApp'));
//
//    // Store references to $rootScope and $compile
//    // so they are available to all tests in this describe block
//    beforeEach(inject(function(_$compile_, _$rootScope_, _$httpBackend_){
//        // The injector unwraps the underscores (_) from around the parameter names when matching
//        $compile = _$compile_;
//        $rootScope = _$rootScope_;
//        $httpBackend = _$httpBackend_;
//        $httpBackend.whenGET('loginView.html').respond('<div class="container"> <div class="row"> <div class="col-xs-12 col-sm-6 col-sm-offset-3"> <div class="opt-in"><div ng-transclude></div> <h1>Simple Login Form</h1> <form name="createProjectForm" ng-submit="createProjectForm.$valid && createProjectForm.submit()" novalidate> <div class="form-group" ng-class="{ \'has-error\' : createProjectForm.name.$invalid && !createProjectForm.name.$pristine }"> <label for="name">First Name:</label> <input type="text" class="form-control" name="name" id="name" placeholder="First Name" required data-ng-minlength="3" data-ng-model="project.name"> <span class="help-block" ng-show="createProjectForm.name.$dirty && createProjectForm.name.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.name.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.lastName.$invalid && !createProjectForm.lastName.$pristine}"> <label for="lastName">Last Name:</label> <input type="text" class="form-control" name="lastName" id="lastName" placeholder="Last Name" required data-ng-minlength="3" data-ng-model="project.lastName"> <span class="help-block" ng-show="createProjectForm.lastName.$dirty && createProjectForm.lastName.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.lastName.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.email.$invalid && !createProjectForm.email.$pristine}"> <label for="email">Email:</label> <input type="email" class="form-control" name="email" id="email" placeholder="you@email.com" required data-ng-minlength="3" data-ng-model="project.email"> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.required">The email field is required.</span> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.email">Your email is invalid.</span> </div> <div class="form-group"> <button ng-disabled="createProjectForm.$invalid" type="submit" class="btn btn-primary pull-right" value="Login" title="Login"> <span>Login</span> </button> </div> </form> </div> </div> </div></div>');
//    }));
//
//    it('Replaces the element with the appropriate content', function() {
//        // Compile a piece of HTML containing the directive
//        var element = $compile('<opt-in><div class="brand-logo"></div></opt-in>')($rootScope);
//        // fire all the watches, so the scope expression {{1 + 1}} will be evaluated
//        $rootScope.$digest();
//        // Check that the compiled element contains the templated content
//        expect(element.html()).toContain('<div class="container"> <div class="row"> <div class="col-xs-12 col-sm-6 col-sm-offset-3"> <div class="opt-in"><div ng-transclude></div> <h1>Simple Login Form</h1> <form name="createProjectForm" ng-submit="createProjectForm.$valid && createProjectForm.submit()" novalidate> <div class="form-group" ng-class="{ \'has-error\' : createProjectForm.name.$invalid && !createProjectForm.name.$pristine }"> <label for="name">First Name:</label> <input type="text" class="form-control" name="name" id="name" placeholder="First Name" required data-ng-minlength="3" data-ng-model="project.name"> <span class="help-block" ng-show="createProjectForm.name.$dirty && createProjectForm.name.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.name.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.lastName.$invalid && !createProjectForm.lastName.$pristine}"> <label for="lastName">Last Name:</label> <input type="text" class="form-control" name="lastName" id="lastName" placeholder="Last Name" required data-ng-minlength="3" data-ng-model="project.lastName"> <span class="help-block" ng-show="createProjectForm.lastName.$dirty && createProjectForm.lastName.$error.required">The name field is required.</span> <span class="help-block" ng-show="createProjectForm.lastName.$error.minlength">The name must be at least 3 characters.</span> </div> <div class="form-group" ng-class="{\'has-error\': createProjectForm.email.$invalid && !createProjectForm.email.$pristine}"> <label for="email">Email:</label> <input type="email" class="form-control" name="email" id="email" placeholder="you@email.com" required data-ng-minlength="3" data-ng-model="project.email"> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.required">The email field is required.</span> <span class="help-block" ng-show="createProjectForm.email.$dirty && createProjectForm.email.$error.email">Your email is invalid.</span> </div> <div class="form-group"> <button ng-disabled="createProjectForm.$invalid" type="submit" class="btn btn-primary pull-right" value="Login" title="Login"> <span>Login</span> </button> </div> </form> </div> </div> </div></div>');
//    });
//});